{"ast":null,"code":"const express = require(\"express\");\nconst http = require(\"http\");\nconst {\n  Server\n} = require(\"socket.io\");\nconst app = express();\nconst server = http.createServer(app);\nconst io = new Server(server);\n\n// Serve static files from the \"public\" directory\napp.use(express.static(\"public\"));\n\n// Handle socket connections\nio.on(\"connection\", socket => {\n  console.log(\"User connected:\", socket.id);\n\n  // Listen for a user joining a room\n  socket.on(\"join-room\", (roomId, userId) => {\n    socket.join(roomId);\n    socket.broadcast.to(roomId).emit(\"user-connected\", userId);\n\n    // Listen for the user disconnecting\n    socket.on(\"disconnect\", () => {\n      socket.broadcast.to(roomId).emit(\"user-disconnected\", userId);\n    });\n\n    // Listen for incoming offers\n    socket.on(\"offer\", (offer, roomId) => {\n      socket.broadcast.to(roomId).emit(\"offer\", offer);\n    });\n\n    // Listen for incoming answers\n    socket.on(\"answer\", answer => {\n      socket.broadcast.to(roomId).emit(\"answer\", answer);\n    });\n\n    // Listen for ICE candidates\n    socket.on(\"ice-candidate\", candidate => {\n      socket.broadcast.to(roomId).emit(\"ice-candidate\", candidate);\n    });\n  });\n});\n\n// Set the port for the server\nconst PORT = process.env.PORT || 3000;\nserver.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));","map":{"version":3,"names":["express","require","http","Server","app","server","createServer","io","use","static","on","socket","console","log","id","roomId","userId","join","broadcast","to","emit","offer","answer","candidate","PORT","process","env","listen"],"sources":["C:/Users/Krishang Darji/OneDrive/Desktop/Mudravani1/src/components/hooks/useWebRTC.js"],"sourcesContent":["const express = require(\"express\");\r\nconst http = require(\"http\");\r\nconst { Server } = require(\"socket.io\");\r\n\r\nconst app = express();\r\nconst server = http.createServer(app);\r\nconst io = new Server(server);\r\n\r\n// Serve static files from the \"public\" directory\r\napp.use(express.static(\"public\"));\r\n\r\n// Handle socket connections\r\nio.on(\"connection\", (socket) => {\r\n    console.log(\"User connected:\", socket.id);\r\n\r\n    // Listen for a user joining a room\r\n    socket.on(\"join-room\", (roomId, userId) => {\r\n        socket.join(roomId);\r\n        socket.broadcast.to(roomId).emit(\"user-connected\", userId);\r\n\r\n        // Listen for the user disconnecting\r\n        socket.on(\"disconnect\", () => {\r\n            socket.broadcast.to(roomId).emit(\"user-disconnected\", userId);\r\n        });\r\n\r\n        // Listen for incoming offers\r\n        socket.on(\"offer\", (offer, roomId) => {\r\n            socket.broadcast.to(roomId).emit(\"offer\", offer);\r\n        });\r\n\r\n        // Listen for incoming answers\r\n        socket.on(\"answer\", (answer) => {\r\n            socket.broadcast.to(roomId).emit(\"answer\", answer);\r\n        });\r\n\r\n        // Listen for ICE candidates\r\n        socket.on(\"ice-candidate\", (candidate) => {\r\n            socket.broadcast.to(roomId).emit(\"ice-candidate\", candidate);\r\n        });\r\n    });\r\n});\r\n\r\n// Set the port for the server\r\nconst PORT = process.env.PORT || 3000;\r\nserver.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAO,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AAEvC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,MAAM,GAAGH,IAAI,CAACI,YAAY,CAACF,GAAG,CAAC;AACrC,MAAMG,EAAE,GAAG,IAAIJ,MAAM,CAACE,MAAM,CAAC;;AAE7B;AACAD,GAAG,CAACI,GAAG,CAACR,OAAO,CAACS,MAAM,CAAC,QAAQ,CAAC,CAAC;;AAEjC;AACAF,EAAE,CAACG,EAAE,CAAC,YAAY,EAAGC,MAAM,IAAK;EAC5BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,MAAM,CAACG,EAAE,CAAC;;EAEzC;EACAH,MAAM,CAACD,EAAE,CAAC,WAAW,EAAE,CAACK,MAAM,EAAEC,MAAM,KAAK;IACvCL,MAAM,CAACM,IAAI,CAACF,MAAM,CAAC;IACnBJ,MAAM,CAACO,SAAS,CAACC,EAAE,CAACJ,MAAM,CAAC,CAACK,IAAI,CAAC,gBAAgB,EAAEJ,MAAM,CAAC;;IAE1D;IACAL,MAAM,CAACD,EAAE,CAAC,YAAY,EAAE,MAAM;MAC1BC,MAAM,CAACO,SAAS,CAACC,EAAE,CAACJ,MAAM,CAAC,CAACK,IAAI,CAAC,mBAAmB,EAAEJ,MAAM,CAAC;IACjE,CAAC,CAAC;;IAEF;IACAL,MAAM,CAACD,EAAE,CAAC,OAAO,EAAE,CAACW,KAAK,EAAEN,MAAM,KAAK;MAClCJ,MAAM,CAACO,SAAS,CAACC,EAAE,CAACJ,MAAM,CAAC,CAACK,IAAI,CAAC,OAAO,EAAEC,KAAK,CAAC;IACpD,CAAC,CAAC;;IAEF;IACAV,MAAM,CAACD,EAAE,CAAC,QAAQ,EAAGY,MAAM,IAAK;MAC5BX,MAAM,CAACO,SAAS,CAACC,EAAE,CAACJ,MAAM,CAAC,CAACK,IAAI,CAAC,QAAQ,EAAEE,MAAM,CAAC;IACtD,CAAC,CAAC;;IAEF;IACAX,MAAM,CAACD,EAAE,CAAC,eAAe,EAAGa,SAAS,IAAK;MACtCZ,MAAM,CAACO,SAAS,CAACC,EAAE,CAACJ,MAAM,CAAC,CAACK,IAAI,CAAC,eAAe,EAAEG,SAAS,CAAC;IAChE,CAAC,CAAC;EACN,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF;AACA,MAAMC,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;AACrCnB,MAAM,CAACsB,MAAM,CAACH,IAAI,EAAE,MAAMZ,OAAO,CAACC,GAAG,CAAC,sCAAsCW,IAAI,EAAE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}