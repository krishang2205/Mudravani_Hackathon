{"ast":null,"code":"const localVideo = document.getElementById('localVideo');\nconst remoteVideo = document.getElementById('remoteVideo');\nconst startButton = document.getElementById('startButton');\nconst muteButton = document.getElementById('muteButton');\nconst endCallButton = document.getElementById('endCallButton');\nconst socket = io();\nlet localStream;\nlet peerConnection;\nlet isMuted = false;\nconst configuration = {\n  iceServers: [{\n    urls: 'stun:stun.l.google.com:19302'\n  }]\n};\n\n// Start the call when the button is clicked\nstartButton.onclick = async () => {\n  // Get user media\n  localStream = await navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  });\n  localVideo.srcObject = localStream;\n\n  // Create peer connection\n  peerConnection = new RTCPeerConnection(configuration);\n\n  // Set up ICE candidate handling\n  peerConnection.onicecandidate = event => {\n    if (event.candidate) {\n      socket.emit(\"ice-candidate\", event.candidate);\n    }\n  };\n\n  // Add local stream to peer connection\n  localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n\n  // Handle remote stream\n  peerConnection.ontrack = event => {\n    remoteVideo.srcObject = event.streams[0];\n  };\n\n  // Create offer\n  const offer = await peerConnection.createOffer();\n  await peerConnection.setLocalDescription(offer);\n\n  // Join a room (you can use a unique room ID)\n  const roomId = \"room1\"; // Change this to a dynamic room ID if needed\n  socket.emit(\"join-room\", roomId, socket.id);\n\n  // Send the offer to the other user\n  socket.emit(\"offer\", offer, roomId);\n};\n\n// Handle incoming offer\nsocket.on(\"offer\", async offer => {\n  await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n  const answer = await peerConnection.createAnswer();\n  await peerConnection.setLocalDescription(answer);\n  socket.emit(\"answer\", answer);\n});\n\n// Handle incoming answer\nsocket.on(\"answer\", answer => {\n  peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n});\n\n// Handle user connection\nsocket.on(\"user-connected\", userId => {\n  console.log(\"User  connected:\", userId);\n});\n\n// Handle user disconnection\nsocket.on(\"user-disconnected\", userId => {\n  console.log(\"User  disconnected:\", userId);\n});\n\n// Listen for ICE candidates from other users\nsocket.on(\"ice-candidate\", candidate => {\n  peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n});\n\n// Mute/Unmute functionality\nmuteButton.onclick = () => {\n  isMuted = !isMuted;\n  localStream.getAudioTracks()[0].enabled = !isMuted;\n  muteButton.textContent = isMuted ? \"Unmute\" : \"Mute\";\n};\n\n// End call functionality\nendCallButton.onclick = () => {\n  localStream.getTracks().forEach(track => track.stop());\n  peerConnection.close();\n  localVideo.srcObject = null;\n  remoteVideo.srcObject = null;\n  startButton.disabled = false;\n  muteButton.disabled = true;\n  endCallButton.disabled = true;\n};","map":{"version":3,"names":["localVideo","document","getElementById","remoteVideo","startButton","muteButton","endCallButton","socket","io","localStream","peerConnection","isMuted","configuration","iceServers","urls","onclick","navigator","mediaDevices","getUserMedia","video","audio","srcObject","RTCPeerConnection","onicecandidate","event","candidate","emit","getTracks","forEach","track","addTrack","ontrack","streams","offer","createOffer","setLocalDescription","roomId","id","on","setRemoteDescription","RTCSessionDescription","answer","createAnswer","userId","console","log","addIceCandidate","RTCIceCandidate","getAudioTracks","enabled","textContent","stop","close","disabled"],"sources":["C:/Users/Krishang Darji/OneDrive/Desktop/Mudravani1/src/components/hooks/useWebRTC.js"],"sourcesContent":["const localVideo = document.getElementById('localVideo');\r\nconst remoteVideo = document.getElementById('remoteVideo');\r\nconst startButton = document.getElementById('startButton');\r\nconst muteButton = document.getElementById('muteButton');\r\nconst endCallButton = document.getElementById('endCallButton');\r\n\r\nconst socket = io();\r\nlet localStream;\r\nlet peerConnection;\r\nlet isMuted = false;\r\n\r\nconst configuration = {\r\n    iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\r\n};\r\n\r\n// Start the call when the button is clicked\r\nstartButton.onclick = async () => {\r\n    // Get user media\r\n    localStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n    localVideo.srcObject = localStream;\r\n\r\n    // Create peer connection\r\n    peerConnection = new RTCPeerConnection(configuration);\r\n\r\n    // Set up ICE candidate handling\r\n    peerConnection.onicecandidate = (event) => {\r\n        if (event.candidate) {\r\n            socket.emit(\"ice-candidate\", event.candidate);\r\n        }\r\n    };\r\n\r\n    // Add local stream to peer connection\r\n    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\r\n\r\n    // Handle remote stream\r\n    peerConnection.ontrack = (event) => {\r\n        remoteVideo.srcObject = event.streams[0];\r\n    };\r\n\r\n    // Create offer\r\n    const offer = await peerConnection.createOffer();\r\n    await peerConnection.setLocalDescription(offer);\r\n\r\n    // Join a room (you can use a unique room ID)\r\n    const roomId = \"room1\"; // Change this to a dynamic room ID if needed\r\n    socket.emit(\"join-room\", roomId, socket.id);\r\n\r\n    // Send the offer to the other user\r\n    socket.emit(\"offer\", offer, roomId);\r\n};\r\n\r\n// Handle incoming offer\r\nsocket.on(\"offer\", async (offer) => {\r\n    await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\r\n    const answer = await peerConnection.createAnswer();\r\n    await peerConnection.setLocalDescription(answer);\r\n    socket.emit(\"answer\", answer);\r\n});\r\n\r\n// Handle incoming answer\r\nsocket.on(\"answer\", (answer) => {\r\n    peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\r\n});\r\n\r\n// Handle user connection\r\nsocket.on(\"user-connected\", (userId) => {\r\n    console.log(\"User  connected:\", userId);\r\n});\r\n\r\n// Handle user disconnection\r\nsocket.on(\"user-disconnected\", (userId) => {\r\n    console.log(\"User  disconnected:\", userId);\r\n});\r\n\r\n// Listen for ICE candidates from other users\r\nsocket.on(\"ice-candidate\", (candidate) => {\r\n    peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\r\n});\r\n\r\n// Mute/Unmute functionality\r\nmuteButton.onclick = () => {\r\n    isMuted = !isMuted;\r\n    localStream.getAudioTracks()[0].enabled = !isMuted;\r\n    muteButton.textContent = isMuted ? \"Unmute\" : \"Mute\";\r\n};\r\n\r\n// End call functionality\r\nendCallButton.onclick = () => {\r\n    localStream.getTracks().forEach(track => track.stop());\r\n    peerConnection.close();\r\n    localVideo.srcObject = null;\r\n    remoteVideo.srcObject = null;\r\n    startButton.disabled = false;\r\n    muteButton.disabled = true;\r\n    endCallButton.disabled = true;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}